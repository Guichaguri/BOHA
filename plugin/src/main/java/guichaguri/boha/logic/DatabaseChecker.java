package guichaguri.boha.logic;

import com.eclipsesource.json.Json;
import com.eclipsesource.json.JsonArray;
import com.eclipsesource.json.JsonObject;
import guichaguri.boha.Blocker;
import guichaguri.boha.BlockerManager;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.util.Arrays;
import java.util.UUID;

/**
 * @author Guilherme Chaguri
 */
public class DatabaseChecker extends ArrayChecker {

    private final File cacheFile;

    public DatabaseChecker(File cacheFile, int refreshInterval) {
        super(refreshInterval);
        this.cacheFile = cacheFile;
        this.database = loadDatabaseFile();
    }

    @Override
    public UUID[] refresh() {
        return downloadDatabase();
    }

    private UUID[] fromJson(JsonObject json) {
        JsonArray players = json.get("players").asArray();

        UUID[] db = new UUID[players.size()];
        for(int i = 0; i < players.size(); i++) {
            db[i] = UUID.fromString(players.get(i).asString());
        }

        Arrays.sort(db);

        return db;
    }

    private UUID[] loadDatabaseFile() {
        UUID[] db;

        Reader reader = null;
        try {
            reader = new FileReader(cacheFile);
            JsonObject obj = Json.parse(reader).asObject();
            db = fromJson(obj);
            refreshTime = obj.getLong("downloadTime", System.currentTimeMillis());
        } catch(Exception ex) {
            db = downloadDatabase();
            refreshTime = System.currentTimeMillis();
        } finally {
            BlockerManager.closeQuietly(reader);
        }

        return db;
    }

    private UUID[] downloadDatabase() {
        JsonObject object;

        Reader reader = null;
        try {
            // Download the database and parse it
            URL url = new URL(Blocker.DB_URL);
            reader = new InputStreamReader(url.openStream());
            object = Json.parse(reader).asObject();
        } catch(Exception ex) {
            return null;
        } finally {
            BlockerManager.closeQuietly(reader);
        }

        object.set("downloadTime", System.currentTimeMillis());
        object.set("__", "Do not edit this file or things might not work");

        FileWriter writer = null;
        try {
            // Save the sorted database to a file
            cacheFile.getParentFile().mkdirs();
            writer = new FileWriter(cacheFile);
            object.writeTo(writer);
        } catch(Exception ex) {
            ex.printStackTrace();
        } finally {
            BlockerManager.closeQuietly(writer);
        }

        return fromJson(object);
    }
}
