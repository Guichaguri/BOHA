package guichaguri.boha.logic;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import guichaguri.boha.Blocker;
import guichaguri.boha.BlockerManager;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.util.Arrays;
import java.util.UUID;
import org.apache.commons.io.IOUtils;

/**
 * @author Guilherme Chaguri
 */
public class DatabaseChecker extends ArrayChecker {

    private final JsonParser parser = new JsonParser();
    private final File cacheFile;

    public DatabaseChecker(File cacheFile, int refreshInterval) {
        super(refreshInterval);
        this.cacheFile = cacheFile;
        this.database = loadDatabaseFile();
    }

    @Override
    public UUID[] refresh() {
        return downloadDatabase();
    }

    private UUID[] fromJson(JsonObject obj) {
        JsonArray players = obj.get("players").getAsJsonArray();

        UUID[] db = new UUID[players.size()];
        for(int i = 0; i < players.size(); i++) {
            db[i] = UUID.fromString(players.get(i).getAsString());
        }

        Arrays.sort(db);

        for(int i = 0; i < db.length; i++) {
            if(db[i] == null) System.out.println(i);
        }

        return db;
    }

    private UUID[] loadDatabaseFile() {
        UUID[] db;

        Reader reader = null;
        try {
            reader = new FileReader(cacheFile);
            JsonObject obj = parser.parse(reader).getAsJsonObject();
            db = fromJson(obj);

            if(obj.has("downloadTime")) {
                refreshTime = obj.get("downloadTime").getAsLong();
            } else {
                refreshTime = System.currentTimeMillis();
            }

        } catch(Exception ex) {
            db = downloadDatabase();
            refreshTime = System.currentTimeMillis();
        } finally {
            IOUtils.closeQuietly(reader);
        }

        return db;
    }

    private UUID[] downloadDatabase() {
        BlockerManager.LOG.info("Downloading DOHA database....");
        JsonObject object;

        Reader reader = null;
        try {
            // Download the database and parse it
            URL url = new URL(Blocker.DB_URL);
            reader = new InputStreamReader(url.openStream());
            object = parser.parse(reader).getAsJsonObject();
        } catch(Exception ex) {
            return null;
        } finally {
            IOUtils.closeQuietly(reader);
        }

        object.addProperty("downloadTime", System.currentTimeMillis());
        object.addProperty("__", "Do not edit this file or things might not work");

        FileWriter writer = null;
        try {
            // Save the sorted database to a file
            cacheFile.getParentFile().mkdirs();
            writer = new FileWriter(cacheFile);
            BlockerManager.GSON.toJson(object, writer);
        } catch(Exception ex) {
            ex.printStackTrace();
        } finally {
            IOUtils.closeQuietly(writer);
        }

        BlockerManager.LOG.info("Done.");

        return fromJson(object);
    }

}
