package guichaguri.boha.logic;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import guichaguri.boha.Blocker;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.Writer;
import java.net.URL;
import java.util.Arrays;
import java.util.UUID;

/**
 * @author Guilherme Chaguri
 */
public class DohaDatabaseChecker implements IChecker {

    private final String dbUrl = "https://raw.githubusercontent.com/IamBlueSlime/DOHA/master/db.json";

    private final JsonParser parser = new JsonParser();
    private final File cacheFile;

    private UUID[] database;

    private final boolean refreshEnabled;
    private final long refreshInterval;
    private long refreshTime = 0;

    public DohaDatabaseChecker(File cacheFile, int refreshInterval) {
        this.refreshEnabled = refreshInterval > 0;
        this.refreshInterval = refreshInterval * 1000L * 3600L;
        this.cacheFile = cacheFile;
        this.database = loadDatabaseFile();
    }

    @Override
    public boolean isBlocked(UUID uuid) {
        if(refreshEnabled) {
            long now = System.currentTimeMillis();
            if(now - refreshTime > refreshInterval) {
                UUID[] db = downloadDatabase();
                if(db != null) {
                    database = db;
                    refreshTime = now;
                }
            }
        }

        return Arrays.binarySearch(database, uuid) >= 0;
    }

    private UUID[] fromJson(JsonObject obj) {
        JsonArray players = obj.get("players").getAsJsonArray();

        UUID[] db = new UUID[players.size()];
        for(int i = 0; i < players.size(); i++) {
            db[i] = UUID.fromString(players.get(i).getAsString());
        }

        Arrays.sort(db);

        return db;
    }

    private UUID[] loadDatabaseFile() {
        UUID[] db;

        Reader reader = null;
        try {
            reader = new FileReader(cacheFile);
            JsonObject obj = parser.parse(reader).getAsJsonObject();
            db = fromJson(obj);

            if(obj.has("downloadTime")) {
                refreshTime = obj.get("downloadTime").getAsLong();
            } else {
                refreshTime = System.currentTimeMillis();
            }

        } catch(Exception ex) {
            db = downloadDatabase();
            refreshTime = System.currentTimeMillis();
        } finally {
            Blocker.closeQuietly(reader);
        }

        return db;
    }

    private UUID[] downloadDatabase() {
        JsonObject object;

        Reader reader = null;
        try {
            // Download the database and parse it
            URL url = new URL(dbUrl);
            reader = new InputStreamReader(url.openStream());
            object = parser.parse(reader).getAsJsonObject();
        } catch(Exception ex) {
            return null;
        } finally {
            Blocker.closeQuietly(reader);
        }

        object.addProperty("downloadTime", System.currentTimeMillis());
        object.addProperty("__", "Do not edit this file or things might not work");

        Writer writer = null;
        try {
            // Save the sorted database to a file
            cacheFile.getParentFile().mkdirs();
            writer = new FileWriter(cacheFile);
            Blocker.GSON.toJson(object, writer);
        } catch(Exception ex) {
            ex.printStackTrace();
        } finally {
            Blocker.closeQuietly(writer);
        }

        return fromJson(object);
    }

}
